plugins {
    id 'java'
    id 'antlr'
    id 'eclipse'
    id 'com.google.protobuf' version '0.8.14'
}

group 'ca.waterloo.dsg'
version '0.1.0'

repositories {
    mavenCentral()
}

dependencies {
    antlr "org.antlr:antlr4:4.7"

    implementation 'io.grpc:grpc-netty-shaded:1.34.1'
    implementation 'io.grpc:grpc-protobuf:1.34.1'
    implementation 'io.grpc:grpc-stub:1.34.1'
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53'

    implementation 'org.apache.logging.log4j:log4j-api:2.8.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.8.2'

    implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'

    implementation 'org.jline:jline:3.2.0'
    implementation 'it.unimi.dsi:fastutil:8.2.2'
    implementation 'com.google.code.gson:gson:2.8.6'

    testImplementation 'junit:junit:4.12'
    testImplementation group: 'com.sun.net.httpserver', name: 'http', version: '20070405'
    testImplementation group: 'org.openjdk.jmh', name: 'jmh-core', version: '1.19'
    testImplementation group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.19'
}

// ANTLR4 configuration.
generateGrammarSource {
    maxHeapSize = "64m"
    arguments += [
            "-long-messages",                                   // show exception details
            "-visitor",                                         // generate parse tree visitor classes
            "-package", "ca.waterloo.dsg.graphflow.grammar"     // specify package for generated classes
    ]
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.12.0"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.34.1'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

// Add the source files generated by ANTLR4 and gRPC to the gradle sourcesets.
sourceSets.main.java.srcDirs += "$buildDir/generated-src/antlr/main"
sourceSets.main.java.srcDirs += "$buildDir/generated/source/proto/main/grpc"
sourceSets.main.java.srcDirs += "$buildDir/generated/source/proto/main/java"

compileJava {
    sourceCompatibility = '11'
    targetCompatibility = '11'
    // Enable additional compile time warnings.
    options.compilerArgs << "-Xlint:all" << "-Xlint:-static" << "-Xlint:-serial"
}

apply plugin: 'application'
// Disable the default assembly tasks.
startScripts.enabled = false
run.enabled = false
distZip.enabled = false
distTar.enabled = false
// Create the convenience executables.
def scripts = [
        'graphflow-server': 'ca.waterloo.dsg.graphflow.server.GraphflowServerRunner',
        'graphflow-cli'   : 'ca.waterloo.dsg.graphflow.client.cli.GraphflowCliRunner',
        'experiment-cspq' : 'ca.waterloo.dsg.graphflow.Experiment',
]
scripts.each() { fileName, className ->
    tasks.create(name: fileName, type: CreateStartScripts) {
        mainClassName = className
        applicationName = fileName
        outputDir = file('build/scripts')
        classpath = jar.outputs.files + project.configurations.runtimeClasspath
    }
    applicationDistribution.into("bin") {
        duplicatesStrategy= DuplicatesStrategy.EXCLUDE
        from(tasks[fileName])
        fileMode = 0755
    }
}

task udfJar(type: Jar) {
    archiveBaseName = "udf"
    from sourceSets.main.output
    include('**/udf/UDFAction.class', '**/udf/subgraph/*.class')
    exclude('**/udf/subgraph/SubgraphFactory.class')
    includeEmptyDirs = false
    shouldRunAfter "installDist"
}
